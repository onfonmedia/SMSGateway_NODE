/**
 * OnfonMediaSMSGatewayLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const _request = require('../Http/Client/RequestClient');
const _configuration = require('../configuration');
const _apiHelper = require('../APIHelper');
const _baseController = require('./BaseController');

class SMSController {
    /**
     * Get Sent Message List
     *
     * @param {date} enddate Date format must be in yyyy-mm-dd
     * @param {date} fromdate Date format must be in yyyy-mm-dd
     * @param {int} length Ending index value to fetch the campaign detail.
     * @param {int} start Starting index value to fetch the campaign detail.
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getSentMessageList(enddate, fromdate, length, start, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _pathUrl = '/SMS';
        let _queryBuilder = `${_baseUri}${_pathUrl}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            enddate: _apiHelper.stringifyDateTime(enddate, 'date'),
            fromdate: _apiHelper.stringifyDateTime(fromdate, 'date'),
            length,
            start,
            ApiKey: _configuration.apiKey,
            ClientId: _configuration.clientId,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            AccessKey: _configuration.accessKey,
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    const parsed = JSON.parse(_response.body);
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Get Sent Message Status
     *
     * @param {int} messageId MessageId of message
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getSentMessageStatus(messageId, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _pathUrl = '/MessageStatus';
        let _queryBuilder = `${_baseUri}${_pathUrl}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            MessageId: messageId,
            ApiKey: _configuration.apiKey,
            ClientId: _configuration.clientId,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            AccessKey: _configuration.accessKey,
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    const parsed = JSON.parse(_response.body);
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Create SMS
     *
     * @param {string} message text message to send
     * @param {string} mobileNumber Use mobile number as comma sepreated to send message on
     * multiple mobile number e.g. 78461230,78945612
     * @param {string} senderId Approved Sender Id
     * @param {string} coRelator (optional) Parameter required for using SDP OnDemand Service
     * @param {bool} isFlash (optional) Is_Flash is true or false for flash message
     * @param {bool} isUnicode (optional) Is_Unicode is true or false for unicode message
     * @param {string} linkId (optional) Parameter required for using SDP OnDemand Service
     * @param {string} groupId (optional) Valid group-id of current user (only for group message
     * otherwise leave empty string)
     * @param {string} scheduleTime (optional) scheduleTime Date in yyyy-MM-dd HH:MM (only for
     * schedule message)
     * @param {string} serviceId (optional) Parameter required for using SDP OnSubscription
     * Service
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getCreateSMS(message,
        mobileNumber,
        senderId,
        coRelator,
        isFlash,
        isUnicode,
        linkId,
        groupId,
        scheduleTime,
        serviceId,
        callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _pathUrl = '/SendSMS';
        let _queryBuilder = `${_baseUri}${_pathUrl}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            Message: message,
            MobileNumber: mobileNumber,
            SenderId: senderId,
            CoRelator: coRelator,
            Is_Flash: isFlash,
            Is_Unicode: isUnicode,
            LinkId: linkId,
            groupId,
            scheduleTime,
            serviceId,
            ApiKey: _configuration.apiKey,
            ClientId: _configuration.clientId,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            AccessKey: _configuration.accessKey,
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    const parsed = JSON.parse(_response.body);
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Create SMS
     *
     * @param {string} message text message to send
     * @param {string} mobileNumber Use mobile number as comma sepreated to send message on
     * multiple mobile number e.g. 78461230,78945612
     * @param {string} senderId Approved Sender Id
     * @param {string} coRelator (optional) Parameter required for using SDP OnDemand Service
     * @param {bool} isFlash (optional) Is_Flash is true or false for flash message
     * @param {bool} isUnicode (optional) Is_Unicode is true or false for unicode message
     * @param {string} linkId (optional) Parameter required for using SDP OnDemand Service
     * @param {string} groupId (optional) Valid group-id of current user (only for group message
     * otherwise leave empty string)
     * @param {string} scheduleTime (optional) scheduleTime Date in yyyy-MM-dd HH:MM (only for
     * schedule message)
     * @param {string} serviceId (optional) Parameter required for using SDP OnSubscription
     * Service
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createSMS(message,
        mobileNumber,
        senderId,
        coRelator,
        isFlash,
        isUnicode,
        linkId,
        groupId,
        scheduleTime,
        serviceId,
        callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/SendSMS';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            Message: message,
            MobileNumber: mobileNumber,
            SenderId: senderId,
            CoRelator: coRelator,
            Is_Flash: isFlash,
            Is_Unicode: isUnicode,
            LinkId: linkId,
            groupId,
            scheduleTime,
            serviceId,
        });

        let _queryBuilder = `${_baseUri}${_pathUrl}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            ApiKey: _configuration.apiKey,
            ClientId: _configuration.clientId,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            AccessKey: _configuration.accessKey,
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    const parsed = JSON.parse(_response.body);
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Create Bulk SMS
     *
     * @param {string} mobileNumberMessage Please ensure while submitting the request the message
     * should be passed in encoded format. e.g.
     * 78461230^test~78945612^hello
     * @param {string} senderId Approved Sender Id
     * @param {string} coRelator (optional) Parameter required for using SDP OnDemand Service
     * @param {bool} isFlash (optional) Is_Flash is true or false for flash message
     * @param {bool} isUnicode (optional) Is_Unicode is true or false for unicode message
     * @param {string} linkId (optional) Parameter required for using SDP OnDemand Service
     * @param {date} scheduleTime (optional) scheduleTime Date in yyyy-MM-dd HH:MM (only for
     * schedule message)
     * @param {string} serviceId (optional) Parameter required for using SDP OnSubscription
     * Service
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getCreateBulkSMS(mobileNumberMessage,
        senderId,
        coRelator,
        isFlash,
        isUnicode,
        linkId,
        scheduleTime,
        serviceId,
        callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _pathUrl = '/SendBulkSMS';
        let _queryBuilder = `${_baseUri}${_pathUrl}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            MobileNumber_Message: mobileNumberMessage,
            SenderId: senderId,
            CoRelator: coRelator,
            Is_Flash: isFlash,
            Is_Unicode: isUnicode,
            LinkId: linkId,
            scheduleTime: _apiHelper.stringifyDateTime(scheduleTime, 'date'),
            serviceId,
            ApiKey: _configuration.apiKey,
            ClientId: _configuration.clientId,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            AccessKey: _configuration.accessKey,
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    const parsed = JSON.parse(_response.body);
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Create Bulk SMS
     *
     * @param {array} messageParameters TODO: type description here
     * @param {string} senderId Approved Sender Id
     * @param {bool} isFlash (optional) Is_Flash is true or false for flash message
     * @param {bool} isUnicode (optional) Is_Unicode is true or false for unicode message
     * @param {date} scheduleDateTime (optional) scheduleTime Date in yyyy-MM-dd HH:MM (only for
     * schedule message)
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createBulkSMS(messageParameters,
        senderId,
        isFlash,
        isUnicode,
        scheduleDateTime,
        callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/SendBulkSMS';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            MessageParameters: messageParameters,
            ScheduleDateTime: _apiHelper.stringifyDateTime(scheduleDateTime, 'date'),
        });

        let _queryBuilder = `${_baseUri}${_pathUrl}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            SenderId: senderId,
            Is_Flash: isFlash,
            Is_Unicode: isUnicode,
            ApiKey: _configuration.apiKey,
            ClientId: _configuration.clientId,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            AccessKey: _configuration.accessKey,
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    const parsed = JSON.parse(_response.body);
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
}
module.exports = SMSController;
